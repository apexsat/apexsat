<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="ltc2620_8c" kind="file" language="C++">
    <compoundname>ltc2620.c</compoundname>
    <includes refid="ltc2620_8h" local="yes">ltc2620.h</includes>
    <incdepgraph>
      <node id="2">
        <label>ltc2620.h</label>
        <link refid="ltc2620_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>main.h</label>
        <link refid="main_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>Core/Src/ltc2620.c</label>
        <link refid="ltc2620_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>stm32f7xx_ll_adc.h</label>
      </node>
      <node id="8">
        <label>stm32f7xx_ll_bus.h</label>
      </node>
      <node id="11">
        <label>stm32f7xx_ll_cortex.h</label>
      </node>
      <node id="5">
        <label>stm32f7xx_ll_dac.h</label>
      </node>
      <node id="14">
        <label>stm32f7xx_ll_dma.h</label>
      </node>
      <node id="10">
        <label>stm32f7xx_ll_exti.h</label>
      </node>
      <node id="17">
        <label>stm32f7xx_ll_gpio.h</label>
      </node>
      <node id="6">
        <label>stm32f7xx_ll_i2c.h</label>
      </node>
      <node id="13">
        <label>stm32f7xx_ll_pwr.h</label>
      </node>
      <node id="7">
        <label>stm32f7xx_ll_rcc.h</label>
      </node>
      <node id="15">
        <label>stm32f7xx_ll_spi.h</label>
      </node>
      <node id="9">
        <label>stm32f7xx_ll_system.h</label>
      </node>
      <node id="16">
        <label>stm32f7xx_ll_usart.h</label>
      </node>
      <node id="12">
        <label>stm32f7xx_ll_utils.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="func">
      <memberdef kind="function" id="ltc2620_8c_1a33ba80ca45e49cb28cb461584bd2e765" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t voltCodeConvert</definition>
        <argsstring>(float volt)</argsstring>
        <name>voltCodeConvert</name>
        <param>
          <type>float</type>
          <declname>volt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Src/ltc2620.c" line="3" column="10" bodyfile="Core/Src/ltc2620.c" bodystart="3" bodyend="8"/>
      </memberdef>
      <memberdef kind="function" id="ltc2620_8c_1a2fd40805a7ab42b69a1ba3766efdd52f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setVoltage</definition>
        <argsstring>(uint8_t *commandBuffer, uint16_t code)</argsstring>
        <name>setVoltage</name>
        <param>
          <type>uint8_t *</type>
          <declname>commandBuffer</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>code</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A test class </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Src/ltc2620.c" line="11" column="6" bodyfile="Core/Src/ltc2620.c" bodystart="11" bodyend="14"/>
      </memberdef>
      <memberdef kind="function" id="ltc2620_8c_1a18b1665d61d8f99558779979427be580" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setCommand</definition>
        <argsstring>(uint8_t *commandBuffer, LTC2620_Command_t command)</argsstring>
        <name>setCommand</name>
        <param>
          <type>uint8_t *</type>
          <declname>commandBuffer</declname>
        </param>
        <param>
          <type>LTC2620_Command_t</type>
          <declname>command</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A test class </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Src/ltc2620.c" line="17" column="6" bodyfile="Core/Src/ltc2620.c" bodystart="17" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="ltc2620_8c_1a0e149be1059f888b8777ce4ce7762dfd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setChannel</definition>
        <argsstring>(uint8_t *commandBuffer, LTC2620_Channel_t channel)</argsstring>
        <name>setChannel</name>
        <param>
          <type>uint8_t *</type>
          <declname>commandBuffer</declname>
        </param>
        <param>
          <type>LTC2620_Channel_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>This method adds two integers. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>First integer to add. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Second integer to add. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The sum of both parameters. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Src/ltc2620.c" line="26" column="6" bodyfile="Core/Src/ltc2620.c" bodystart="26" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="ltc2620_8c_1a257f4b0b7aaa5383431696186ff6f0e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SPI_SendBytes</definition>
        <argsstring>(SPI_TypeDef *SPIx, uint8_t *data, uint16_t length)</argsstring>
        <name>SPI_SendBytes</name>
        <param>
          <type>SPI_TypeDef *</type>
          <declname>SPIx</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A test class </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Src/ltc2620.c" line="31" column="6" bodyfile="Core/Src/ltc2620.c" bodystart="31" bodyend="42"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;ltc2620.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal">uint16_t<sp/>voltCodeConvert(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>volt)<sp/>{</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>code<sp/>=<sp/>floor((volt<sp/>*<sp/>pow(2,<sp/>LTC2620_RESOLUTION))<sp/>/<sp/>LTC2620_VOLTAGE_REFERENCE);</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>code;</highlight></codeline>
<codeline lineno="8"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setVoltage(uint8_t<sp/>*commandBuffer,<sp/>uint16_t<sp/>code)<sp/>{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>commandBuffer[1]<sp/>=<sp/>(uint8_t)((code<sp/>&gt;&gt;<sp/>8)<sp/>&amp;<sp/>0xFF);</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>commandBuffer[2]<sp/>=<sp/>(uint8_t)(code<sp/>&amp;<sp/>0xFF);</highlight></codeline>
<codeline lineno="14"><highlight class="normal">}</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setCommand(uint8_t<sp/>*commandBuffer,<sp/>LTC2620_Command_t<sp/>command)<sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>commandBuffer[0]<sp/>=<sp/>(commandBuffer[0]<sp/>&amp;<sp/>0x0F)<sp/>|<sp/>((command<sp/>&amp;<sp/>0x0F)<sp/>&lt;&lt;<sp/>4);</highlight></codeline>
<codeline lineno="19"><highlight class="normal">}</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setChannel(uint8_t<sp/>*commandBuffer,<sp/>LTC2620_Channel_t<sp/>channel)<sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>commandBuffer[0]<sp/>=<sp/>(commandBuffer[0]<sp/>&amp;<sp/>0xF0)<sp/>|<sp/>(channel<sp/>&amp;<sp/>0x0F);</highlight></codeline>
<codeline lineno="28"><highlight class="normal">}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SPI_SendBytes(SPI_TypeDef*<sp/>SPIx,<sp/>uint8_t*<sp/>data,<sp/>uint16_t<sp/>length)</highlight></codeline>
<codeline lineno="32"><highlight class="normal">{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(uint16_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>length;<sp/>i++)</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!LL_SPI_IsActiveFlag_TXE(SPIx))<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LL_SPI_TransmitData8(SPIx,<sp/>data[i]);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Depending<sp/>on<sp/>your<sp/>needs,<sp/>you<sp/>might<sp/>check<sp/>for<sp/>RXNE,<sp/>read<sp/>the<sp/>data,<sp/>etc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//while<sp/>(!LL_SPI_IsActiveFlag_RXNE(SPIx))<sp/>{<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//(void)LL_SPI_ReceiveData8(SPIx);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="Core/Src/ltc2620.c"/>
  </compounddef>
</doxygen>
